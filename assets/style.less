tour-beacon {
  height: 40px;
  width: 40px;
  z-index: 1000;

  span {
    position: absolute;
    left: 50%;
    top: 50%;
    margin: -15px 0 0 -15px;
    display: block;
    height: 30px;
    width: 30px;
    border-radius: 100%;
    background-color: #3f94d0;
    cursor: pointer;
    animation-name: pulse;
    animation-duration: 1.5s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-out;
  }
}

tour-backdrop {
  z-index: 998;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  text-align: center;
  background: rgba(0, 0, 0, 0.45);
}

tour-tooltip {
  position: relative;
  z-index: 999;
  max-width: 250px;
  background-color: #fff;
  color: #545454;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 15px;
  box-shadow: 0 8px 6px -6px rgba(0,0,0,0.4);
  text-align: center;
  cursor: default;

  &:before,
  &:after {
    content: '';
    display: block;
    width: 0;
    height: 0;
    position: absolute;
  }

  // Top chevron
  &.tour-top:before,
  &.tour-top:after {
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
  }

  &.tour-top:before {
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-bottom: 6px solid #fff;
    z-index: 1;
  }

  &.tour-top:after {
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-bottom: 7px solid #ddd;
  }

  // Right chevron
  &.tour-right:before,
  &.tour-right:after {
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
  }

  &.tour-right:before {
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-left: 6px solid #fff;
    z-index: 1;
  }

  &.tour-right:after {
    border-top: 7px solid transparent;
    border-bottom: 7px solid transparent;
    border-left: 7px solid #ddd;
  }

  // Bottom chevron
  &.tour-bottom:before,
  &.tour-bottom:after {
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
  }

  &.tour-bottom:before {
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid #fff;
    z-index: 1;
  }

  &.tour-bottom:after {
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid #ddd;
  }

  // Left chevron
  &.tour-left:before,
  &.tour-left:after {
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
  }

  &.tour-left:before {
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-right: 6px solid #fff;
    z-index: 1;
  }

  &.tour-left:after {
    border-top: 7px solid transparent;
    border-bottom: 7px solid transparent;
    border-right: 7px solid #ddd;
  }

  // Before, After

  // Top Bottom
  &.tour-top.tour-start:before,
  &.tour-top.tour-start:after,
  &.tour-bottom.tour-start:before,
  &.tour-bottom.tour-start:after {
    left: 0;
    transform: none;
  }

  &.tour-top.tour-end:before,
  &.tour-top.tour-end:after,
  &.tour-bottom.tour-end:before,
  &.tour-bottom.tour-end:after {
    left: auto;
    right: 0;
    transform: none;
  }

  // Right Left
  &.tour-right.tour-start:before,
  &.tour-right.tour-start:after,
  &.tour-left.tour-start:before,
  &.tour-left.tour-start:after {
    top: 0;
    transform: none;
  }

  &.tour-right.tour-end:before,
  &.tour-right.tour-end:after,
  &.tour-left.tour-end:before,
  &.tour-left.tour-end:after {
    top: auto;
    bottom: 0;
    transform: none;
  }

  p {
    margin-bottom: 15px;
  }
}

.tour-highlighted {
  transform-origin: 50% !important;
  transform: scale(1.25) !important;
}

.tour-overlay {
  position: relative;
  display: block;
  height: 100%;
  transition: -webkit-filter 500ms ease-in;

  &:after {
    content: '';
    position: fixed;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
    overflow: hidden;
    background-color: rgba(0,0,0,0);
    will-change: background-color;
    transition: background-color 500ms ease-in;
  }

  &.tour-faded {
    -webkit-filter: grayscale(1) blur(2px);

    &:after {
      width: 100vw;
      height: 100vh;
      background-color: rgba(0,0,0,0.6);
    }
  }
}

// Animations
@animDuration: 300ms;
@animMotionStep: 30px;
@animEasingIn: ease-out;
@animEasingOut: ease-in;
@animBank:
  'tour-top' translateY(-@animMotionStep),
  'tour-top_tour-start' translate(@animMotionStep, -@animMotionStep),
  'tour-top_tour-end' translate(-@animMotionStep, -@animMotionStep),
  'tour-right' translateX(@animMotionStep),
  'tour-right_tour-start' translate(@animMotionStep, @animMotionStep),
  'tour-right_tour-end' translate(@animMotionStep, -@animMotionStep),
  'tour-bottom' translateY(@animMotionStep),
  'tour-bottom_tour-start' translate(@animMotionStep, @animMotionStep),
  'tour-bottom_tour-end' translate(-@animMotionStep, @animMotionStep),
  'tour-left' translateX(-@animMotionStep),
  'tour-left_tour-start' translate(-@animMotionStep, @animMotionStep),
  'tour-left_tour-end' translate(-@animMotionStep, -@animMotionStep);

// Generator
.generateAnimations(@iterator:1) when(@iterator <= length(@animBank)) {
    @name: extract(extract(@animBank, @iterator), 1);
    @cName: replace(@name, "_", ".");
    @cNameIn: ~".@{cName}.tour-in";
    @cNameOut: ~".@{cName}.tour-out";
    @inName: ~"fadeIn-@{name}";
    @outName: ~"fadeOut-@{name}";
    @value: extract(extract(@animBank, @iterator), 2);
    @{cNameIn} {
      animation: ~"@{inName} @{animDuration} @{animEasingIn}";
    }
    @{cNameOut} {
      animation: ~"@{outName} @{animDuration} @{animEasingOut} forwards";
    }
    @keyframes @inName {
      from {
        transform: ~"@{value} scale(0.8)";
        opacity: 0;
      }
      to {
        transform: none;
        opacity: 1;
      }
    }
    @keyframes @outName {
      to {
        transform: ~"@{value} scale(0.8)";
        opacity: 0;
      }
    }
    .generateAnimations((@iterator + 1));
}

.generateAnimations();

// Beacon
@keyframes pulse {
  0% {
    transform: scale(0.3);
    opacity: 0.5;
  }
  80% {
    transform: scale(1.5);
     // Use a non-zero value here to avoid iOS bug
     // If opacity is 0, the rule is combined when
     // uglified with the 100% rule, and apparently
     // iOS doesn't like this and the rule is not
     // applied properly.
    opacity: 0.01;
  }
  100% {
    transform: scale(2.5);
    opacity: 0;
  }
}
